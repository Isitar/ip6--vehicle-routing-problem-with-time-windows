@using IRuettae.WebApp.Models
@model IEnumerable<IRuettae.WebApp.Models.RouteCalculationVM>

<h1>Algorithmus Resultate<button id="btnRefresher" class="btn btn-sm btn-default mb-1 mt-1 float-right" onclick="btnRefreshClick()"><i class="fas fa-sync"></i> Automatisches Aktualisieren einschalten</button></h1>

<table class="table">
    <tr>
        <th></th>
        <th><button class="btn btn-sm btn-outline-dark" id="btn-compare"><strong>Vergleichen</strong></button></th>
        <th>
            @Html.DisplayNameFor(model => model.Year)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StateTextDisplay)
        </th>
        <th>
            Metriken
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td class="@(item.State == RouteCalculationVM.RouteCalculationState.Finished ? "td-green" :
                         (new []{RouteCalculationVM.RouteCalculationState.Running,
                             RouteCalculationVM.RouteCalculationState.Ready
                         }).Contains(item.State) ? "td-orange" : "td-red")"></td>
            <td style="padding-top: 28px">
                @if (!string.IsNullOrEmpty(item.Result))
                {
                    <input type="checkbox" class="form-control" name="compare[@item.Id]" data-id="@item.Id" style="height: 20px" />
                }
            </td>
            <td style="padding-top: 24px">
                @Html.DisplayFor(modelItem => item.Year)
            </td>
            <td style="white-space: nowrap; padding-top: 24px">

                @if ((new[] { RouteCalculationVM.RouteCalculationState.Ready, RouteCalculationVM.RouteCalculationState.Running }).Contains(item.State))
                {
                    <i class="fas fa-spinner fa-pulse"></i>
                }
                &nbsp;
                @Html.DisplayFor(modelItem => item.State)
                (@Html.DisplayFor(modelItem => item.Progress))

            </td>
            <td style="padding-top: 18px">
                <button class="btn btn-link" data-toggle="collapse" data-target="#collapse-status-@item.Id" aria-expanded="False" aria-controls="collapse-status-@item.Id">Log anzeigen</button>

                <div class="collapse" id="collapse-status-@item.Id">
                    <table>
                        <thead>
                        <tr><th>Timestamp</th><th>Log</th></tr>
                        </thead>
                        <tbody>
                            @foreach (var status in item.StateText)
                            {
                                <tr><td>@status.CreationDate</td><td>@Html.Raw(((string)status.Log).Replace(Environment.NewLine, "<br />"))</td></tr>
                            }
                        </tbody>
                    </table>

                </div>
            </td>
            <td style="min-width: 200px; padding-top: 18px">
                @if (!string.IsNullOrEmpty(item.Result))
                {
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapse-cl-@item.Id" aria-expanded="False" aria-controls="collapse-cl-@item.Id">Metriken anzeigen</button>

                    <div class="collapse" id="collapse-cl-@item.Id">
                        <div class="card card-body">
                            <dl>
                                <dt>@Html.DisplayNameFor(m => m.NumberOfSantas)</dt>
                                <dd>@item.NumberOfSantas</dd>

                                <dt>@Html.DisplayNameFor(m => m.NumberOfRoutes)</dt>
                                <dd>@item.NumberOfRoutes</dd>

                                <dt>@Html.DisplayNameFor(m => m.NumberOfVisits)</dt>
                                <dd>@item.NumberOfVisits</dd>

                                <dt>@Html.DisplayNameFor(m => m.TotalWaytime)</dt>
                                <dd>@(Math.Round(item.TotalWaytime / 60)) Minuten</dd>

                                <dt>@Html.DisplayNameFor(m => m.WaytimePerSanta)</dt>
                                <dd>@(Math.Round(item.WaytimePerSanta / 60)) Minuten</dd>

                                <dt>@Html.DisplayNameFor(m => m.TotalVisitTime)</dt>
                                <dd>@(Math.Round(item.TotalVisitTime / 60)) Minuten</dd>

                                <dt>@Html.DisplayNameFor(m => m.DesiredSeconds)</dt>
                                <dd>@(Math.Round(item.DesiredSeconds / 60)) Minuten</dd>

                                <dt>@Html.DisplayNameFor(m => m.LongestDay)</dt>
                                <dd>@(Math.Round(item.LongestDay / 60)) Minuten </dd>

                                <dt>@Html.DisplayNameFor(m => m.LongestRouteDistance)</dt>
                                <dd>@(item.LongestRouteDistance) Meter</dd>

                                <dt>@Html.DisplayNameFor(m => m.LongestRouteTime)</dt>
                                <dd>@(Math.Round(item.LongestRouteTime / 60)) Minuten </dd>

                                <dt>@Html.DisplayNameFor(m => m.LatestVisit)</dt>
                                <dd>@item.LatestVisit.TimeOfDay</dd>

                            </dl>
                        </div>
                    </div>
                }
            </td>
            <td>
                @if (!string.IsNullOrEmpty(item.Result))
                {
                    <a href="@Url.Action("Result", new {id = item.Id})" class="btn btn-lg btn-info">

                        <i class="fa fa-eye"></i>
                        Resultat
                    </a>
                }
            </td>
        </tr>
    }

</table>



@section scripts {
    <script>
        var timeout = null;
        var itemName = 'refresh';
        var button = $('#btnRefresher')[0];
        var refreshIntervalInSeconds = 30;

        function btnRefreshClick() {
            if (localStorage.getItem(itemName) === '1') {
                localStorage.setItem(itemName, 0);
                clearTimeout(timeout);
                button.innerHTML = '<i class="fas fa-sync"></i> Automatisches Aktualisieren einschalten';
            } else {
                localStorage.setItem(itemName, 1);
                onRefresh();
            }
        }

        $(document).ready(() => {
            if (localStorage.getItem(itemName) === '1') {
                button.innerHTML = '<i class="fas fa-sync fa-pulse"></i> Automatisches Aktualisieren abschalten';
                timeout = setTimeout(onRefresh, refreshIntervalInSeconds * 1000);
            } else {
                button.innerHTML = '<i class="fas fa-sync"></i> Automatisches Aktualisieren einschalten';
            }

            $('#btn-compare').click(() => {
                var idParam = Array.from(document.querySelectorAll('.table tr td input[type="checkbox"]')).filter(e => e.checked).map((e,idx) => 'ids['+idx+']='+e.getAttribute('data-id'));
                location.href = '@Url.Action("Compare")?' + idParam.join('&');
            });

            $('.view-more').live('click', function(){
                var btnShowMore = $(this);
                if(btnShowMore.text() === "Mehr anzeigen"){
                    btnShowMore.closest("dt").each(function(k,v){
                        var dObj = $(this);
                        dObj.nextUntil("dt").filter(function(index){
                            $(this).show();
                        });
                    });
                    btnShowMore.text("Weniger anzeigen");
                }else{
                    btnShowMore.closest("dt").each(function(k,v){
                        var dObj = $(this);
                        dObj.nextUntil("dt").filter(function(index){
                            if(index > 2){ $(this).hide(); }
                        });
                    });
                    btnShowMore.text("Mehr anzeigen");
                }
            });
        });

        function onRefresh() {
            location.reload(true);
        }
    </script>
}