using IRuettae.Core.Models;
namespace IRuettae.Evaluator
{
internal partial class DatasetFactory
{
/// <summary>
/// 50 Visits, 2 Days, 5 Santas
/// 10 Breaks, 45 unique visits
/// 15 Desired, 11 Unavailable on day 0
/// 15 Desired, 11 Unavailable on day 1
/// </summary>
public static (OptimizationInput input, (int x, int y)[] coordinates) DataSet9()
{
	// Coordinates of points
	var coordinates = new[]
	{
		(2080,1561),
		(852,1968),
		(3370,2749),
		(1542,1899),
		(2242,3183),
		(939,1058),
		(1796,2145),
		(3780,3815),
		(2904,2927),
		(1040,909),
		(544,3737),
		(1074,2025),
		(1545,947),
		(2779,3070),
		(2257,3008),
		(2922,2995),
		(834,1883),
		(1691,1545),
		(3170,3113),
		(1347,1401),
		(2983,2107),
		(1470,1712),
		(2780,3037),
		(2866,1913),
		(1398,936),
		(1182,1196),
		(2968,2317),
		(1840,1336),
		(2777,2048),
		(1524,1363),
		(1317,1752),
		(2297,2415),
		(2888,2629),
		(2236,3043),
		(777,1588),
		(1613,1066),
		(1592,1510),
		(1748,956),
		(1782,1745),
		(2056,2309),
		(2531,1349),
		(1185,1610),
		(1912,2645),
		(2341,2663),
		(1719,1897),
		(2480,2401)
	};
	const int workingDayDuration = 9 * Hour;
	var input = new OptimizationInput
	{
		Days = new[] {(0* Hour, 0*Hour + workingDayDuration), (24* Hour, 24*Hour + workingDayDuration) },

		RouteCosts = new[,]
		{
			{ 0, 2636, 693, 1846, 914, 960, 3461, 2265, 1075, 1795, 229, 1233, 2219, 1748, 2310, 86, 939, 2585, 752, 2135, 668, 2204, 2014, 1167, 839, 2144, 1172, 1926, 904, 512, 1512, 2140, 1752, 387, 1180, 870, 1351, 956, 1251, 1789, 488, 1257, 1643, 869, 1684 },
			{ 2636, 0, 2015, 1208, 2961, 1685, 1142, 498, 2968, 2993, 2407, 2564, 672, 1142, 511, 2679, 2066, 415, 2430, 749, 2164, 656, 976, 2678, 2683, 590, 2082, 918, 2308, 2282, 1123, 496, 1171, 2841, 2433, 2167, 2417, 1878, 1385, 1632, 2464, 1461, 1032, 1857, 955 },
			{ 693, 2015, 0, 1462, 1034, 353, 2946, 1706, 1110, 2091, 484, 952, 1703, 1319, 1762, 708, 384, 2030, 534, 1455, 200, 1681, 1324, 973, 789, 1486, 637, 1243, 536, 268, 914, 1531, 1338, 825, 836, 392, 965, 285, 657, 1131, 459, 832, 1105, 177, 1063 },
			{ 1846, 1208, 1462, 0, 2492, 1129, 1662, 709, 2572, 1786, 1644, 2342, 548, 175, 705, 1916, 1728, 930, 1994, 1306, 1661, 557, 1415, 2400, 2252, 1130, 1890, 1254, 1956, 1703, 769, 851, 140, 2165, 2208, 1794, 2281, 1509, 893, 1856, 1895, 631, 529, 1388, 817 },
			{ 914, 2961, 1034, 2492, 0, 1384, 3958, 2711, 180, 2707, 976, 616, 2726, 2353, 2772, 831, 895, 3033, 533, 2297, 842, 2702, 2108, 474, 279, 2387, 942, 2087, 659, 790, 1919, 2503, 2371, 554, 674, 794, 815, 1087, 1677, 1618, 604, 1861, 2131, 1145, 2044 },
			{ 960, 1685, 353, 1129, 1384, 0, 2593, 1356, 1448, 2025, 731, 1224, 1349, 978, 1410, 997, 609, 1680, 868, 1187, 542, 1328, 1094, 1272, 1130, 1184, 810, 985, 827, 619, 569, 1194, 1000, 1161, 1094, 666, 1189, 400, 307, 1083, 812, 513, 751, 259, 730 },
			{ 3461, 1142, 2946, 1662, 3958, 2593, 0, 1247, 3994, 3236, 3244, 3636, 1247, 1723, 1186, 3523, 3084, 930, 3427, 1884, 3123, 1266, 2110, 3736, 3689, 1703, 3147, 2031, 3331, 3212, 2039, 1484, 1726, 3738, 3500, 3178, 3507, 2876, 2289, 2764, 3405, 2204, 1843, 2815, 1920 },
			{ 2265, 498, 1706, 709, 2711, 1356, 1247, 0, 2747, 2495, 2040, 2401, 189, 652, 70, 2318, 1838, 324, 2180, 823, 1879, 165, 1014, 2496, 2441, 613, 1913, 888, 2085, 1974, 794, 298, 677, 2513, 2264, 1931, 2284, 1629, 1049, 1621, 2165, 1031, 621, 1570, 675 },
			{ 1075, 2968, 1110, 2572, 180, 1448, 3994, 2747, 0, 2871, 1116, 506, 2773, 2426, 2809, 995, 910, 3065, 579, 2282, 910, 2748, 2083, 359, 320, 2387, 906, 2077, 663, 887, 1961, 2524, 2446, 728, 594, 816, 709, 1117, 1729, 1554, 715, 1942, 2183, 1198, 2073 },
			{ 1795, 2993, 2091, 1786, 2707, 2025, 3236, 2495, 2871, 0, 1792, 2964, 2332, 1861, 2491, 1876, 2473, 2699, 2470, 2933, 2226, 2343, 2952, 2928, 2619, 2809, 2728, 2799, 2568, 2130, 2195, 2592, 1828, 2161, 2876, 2461, 3030, 2345, 2079, 3106, 2221, 1750, 2093, 2183, 2352 },
			{ 229, 2407, 484, 1644, 976, 731, 3244, 2040, 1116, 1792, 0, 1176, 1999, 1538, 2087, 278, 781, 2361, 681, 1910, 504, 1983, 1795, 1136, 836, 1916, 1030, 1703, 800, 365, 1283, 1911, 1544, 528, 1100, 730, 1263, 761, 1022, 1606, 429, 1042, 1418, 657, 1455 },
			{ 1233, 2564, 952, 2342, 616, 1224, 3636, 2401, 506, 2964, 1176, 0, 2455, 2180, 2467, 1175, 615, 2707, 495, 1847, 768, 2427, 1636, 147, 440, 1975, 488, 1652, 416, 836, 1649, 2152, 2206, 1000, 137, 564, 203, 832, 1454, 1064, 754, 1737, 1891, 965, 1728 },
			{ 2219, 672, 1703, 548, 2726, 1349, 1247, 189, 2773, 2332, 1999, 2455, 0, 525, 161, 2278, 1873, 393, 2199, 984, 1886, 33, 1160, 2541, 2462, 776, 1971, 1022, 2118, 1968, 813, 454, 543, 2490, 2318, 1960, 2352, 1658, 1049, 1738, 2161, 965, 597, 1580, 732 },
			{ 1748, 1142, 1319, 175, 2353, 978, 1723, 652, 2426, 1861, 1538, 2180, 525, 0, 665, 1813, 1568, 919, 1846, 1157, 1516, 523, 1252, 2243, 2106, 991, 1723, 1091, 1800, 1568, 594, 736, 40, 2051, 2045, 1638, 2114, 1349, 727, 1681, 1761, 500, 355, 1234, 646 },
			{ 2310, 511, 1762, 705, 2772, 1410, 1186, 70, 2809, 2491, 2087, 2467, 161, 665, 0, 2365, 1902, 274, 2240, 890, 1937, 148, 1083, 2561, 2502, 679, 1980, 958, 2148, 2030, 852, 367, 687, 2565, 2331, 1993, 2352, 1691, 1104, 1691, 2221, 1068, 669, 1628, 740 },
			{ 86, 2679, 708, 1916, 831, 997, 3523, 2318, 995, 1876, 278, 1175, 2278, 1813, 2365, 0, 921, 2640, 703, 2160, 658, 2262, 2032, 1102, 770, 2177, 1145, 1949, 864, 500, 1556, 2185, 1819, 300, 1128, 844, 1301, 957, 1294, 1779, 444, 1320, 1696, 885, 1725 },
			{ 939, 2066, 384, 1728, 895, 609, 3084, 1838, 910, 2473, 781, 615, 1873, 1568, 1902, 921, 0, 2155, 372, 1408, 277, 1847, 1231, 675, 617, 1492, 256, 1196, 247, 427, 1060, 1614, 1594, 915, 485, 105, 591, 219, 846, 862, 510, 1121, 1293, 353, 1164 },
			{ 2585, 415, 2030, 930, 3033, 1680, 930, 324, 3065, 2699, 2361, 2707, 393, 919, 274, 2640, 2155, 0, 2500, 1023, 2202, 397, 1237, 2807, 2761, 821, 2219, 1135, 2402, 2299, 1117, 560, 936, 2837, 2571, 2249, 2583, 1948, 1373, 1876, 2489, 1342, 943, 1893, 991 },
			{ 752, 2430, 534, 1994, 533, 868, 3427, 2180, 579, 2470, 681, 495, 2199, 1846, 2240, 703, 372, 2500, 0, 1781, 334, 2174, 1602, 467, 263, 1861, 497, 1569, 181, 352, 1389, 1970, 1867, 599, 427, 268, 599, 554, 1152, 1185, 264, 1366, 1606, 620, 1511 },
			{ 2135, 749, 1455, 1306, 2297, 1187, 1884, 823, 2282, 2933, 1910, 1847, 984, 1157, 890, 2160, 1408, 1023, 1781, 0, 1563, 951, 226, 1970, 2018, 210, 1378, 214, 1637, 1703, 751, 530, 1197, 2266, 1720, 1513, 1688, 1254, 948, 882, 1865, 1198, 849, 1281, 582 },
			{ 668, 2164, 200, 1661, 842, 542, 3123, 1879, 910, 2226, 504, 768, 1886, 1516, 1937, 658, 277, 2202, 334, 1563, 0, 1863, 1410, 779, 590, 1615, 527, 1349, 353, 158, 1085, 1688, 1535, 704, 661, 235, 805, 313, 836, 1121, 302, 1032, 1289, 310, 1222 },
			{ 2204, 656, 1681, 557, 2702, 1328, 1266, 165, 2748, 2343, 1983, 2427, 33, 523, 148, 2262, 1847, 397, 2174, 951, 1863, 0, 1127, 2514, 2437, 744, 1943, 989, 2092, 1947, 787, 422, 544, 2472, 2290, 1934, 2322, 1632, 1026, 1706, 2140, 952, 576, 1557, 703 },
			{ 2014, 976, 1324, 1415, 2108, 1094, 2110, 1014, 2083, 2952, 1795, 1636, 1160, 1252, 1083, 2032, 1231, 1237, 1602, 226, 1410, 1127, 0, 1763, 1830, 416, 1177, 161, 1450, 1557, 758, 716, 1293, 2114, 1512, 1336, 1471, 1096, 901, 655, 1708, 1202, 915, 1147, 622 },
			{ 1167, 2678, 973, 2400, 474, 1272, 3736, 2496, 359, 2928, 1136, 147, 2541, 2243, 2561, 1102, 675, 2807, 467, 1970, 779, 2514, 1763, 0, 338, 2090, 596, 1771, 445, 820, 1730, 2255, 2267, 900, 251, 605, 350, 895, 1522, 1205, 706, 1784, 1967, 1013, 1821 },
			{ 839, 2683, 789, 2252, 279, 1130, 3689, 2441, 320, 2619, 836, 440, 2462, 2106, 2502, 770, 617, 2761, 263, 2018, 590, 2437, 1830, 338, 0, 2108, 672, 1808, 380, 572, 1652, 2227, 2126, 563, 450, 516, 614, 813, 1415, 1357, 414, 1622, 1869, 883, 1771 },
			{ 2144, 590, 1486, 1130, 2387, 1184, 1703, 613, 2387, 2809, 1916, 1975, 776, 991, 679, 2177, 1492, 821, 1861, 210, 1615, 744, 416, 2090, 2108, 0, 1494, 329, 1730, 1745, 678, 322, 1030, 2309, 1844, 1595, 1827, 1316, 912, 1062, 1918, 1105, 716, 1317, 495 },
			{ 1172, 2082, 637, 1890, 942, 810, 3147, 1913, 906, 2728, 1030, 488, 1971, 1723, 1980, 1145, 256, 2219, 497, 1378, 527, 1943, 1177, 596, 672, 1494, 0, 1176, 317, 668, 1171, 1664, 1752, 1092, 352, 302, 390, 413, 996, 691, 710, 1310, 1418, 573, 1242 },
			{ 1926, 918, 1243, 1254, 2087, 985, 2031, 888, 2077, 2799, 1703, 1652, 1022, 1091, 958, 1949, 1196, 1135, 1569, 214, 1349, 989, 161, 1771, 1808, 329, 1176, 0, 1428, 1489, 604, 591, 1132, 2052, 1522, 1301, 1500, 1040, 766, 741, 1651, 1051, 753, 1068, 461 },
			{ 904, 2308, 536, 1956, 659, 827, 3331, 2085, 663, 2568, 800, 416, 2118, 1800, 2148, 864, 247, 2402, 181, 1637, 353, 2092, 1450, 445, 380, 1730, 317, 1428, 0, 440, 1305, 1860, 1824, 780, 310, 161, 464, 460, 1085, 1007, 419, 1339, 1535, 568, 1411 },
			{ 512, 2282, 268, 1703, 790, 619, 3212, 1974, 887, 2130, 365, 836, 1968, 1568, 2030, 500, 427, 2299, 352, 1703, 158, 1947, 1557, 820, 572, 1745, 668, 1489, 440, 0, 1183, 1799, 1584, 564, 747, 366, 905, 465, 925, 1279, 193, 1073, 1370, 427, 1331 },
			{ 1512, 1123, 914, 769, 1919, 569, 2039, 794, 1961, 2195, 1283, 1649, 813, 594, 852, 1556, 1060, 1117, 1389, 751, 1085, 787, 758, 1730, 1652, 678, 1171, 604, 1305, 1183, 0, 628, 630, 1730, 1512, 1147, 1558, 845, 263, 1091, 1372, 448, 251, 776, 183 },
			{ 2140, 496, 1531, 851, 2503, 1194, 1484, 298, 2524, 2592, 1911, 2152, 454, 736, 367, 2185, 1614, 560, 1970, 530, 1688, 422, 716, 2255, 2227, 322, 1664, 591, 1860, 1799, 628, 0, 772, 2353, 2017, 1712, 2024, 1415, 891, 1328, 1984, 976, 548, 1379, 467 },
			{ 1752, 1171, 1338, 140, 2371, 1000, 1726, 677, 2446, 1828, 1544, 2206, 543, 40, 687, 1819, 1594, 936, 1867, 1197, 1535, 544, 1293, 2267, 2126, 1030, 1752, 1132, 1824, 1584, 630, 772, 0, 2060, 2072, 1662, 2143, 1375, 755, 1719, 1777, 513, 394, 1257, 686 },
			{ 387, 2841, 825, 2165, 554, 1161, 3738, 2513, 728, 2161, 528, 1000, 2490, 2051, 2565, 300, 915, 2837, 599, 2266, 704, 2472, 2114, 900, 563, 2309, 1092, 2052, 780, 564, 1730, 2353, 2060, 0, 985, 818, 1158, 1017, 1468, 1770, 408, 1550, 1897, 991, 1887 },
			{ 1180, 2433, 836, 2208, 674, 1094, 3500, 2264, 594, 2876, 1100, 137, 2318, 2045, 2331, 1128, 485, 2571, 427, 1720, 661, 2290, 1512, 251, 450, 1844, 352, 1522, 310, 747, 1512, 2017, 2072, 985, 0, 444, 174, 699, 1319, 960, 692, 1607, 1755, 837, 1591 },
			{ 870, 2167, 392, 1794, 794, 666, 3178, 1931, 816, 2461, 730, 564, 1960, 1638, 1993, 844, 105, 2249, 268, 1513, 235, 1934, 1336, 605, 516, 1595, 302, 1301, 161, 366, 1147, 1712, 1662, 818, 444, 0, 575, 302, 923, 952, 419, 1179, 1374, 407, 1257 },
			{ 1351, 2417, 965, 2281, 815, 1189, 3507, 2284, 709, 3030, 1263, 203, 2352, 2114, 2352, 1301, 591, 2583, 599, 1688, 805, 2322, 1471, 350, 614, 1827, 390, 1500, 464, 905, 1558, 2024, 2143, 1158, 174, 575, 0, 789, 1387, 876, 862, 1696, 1807, 941, 1619 },
			{ 956, 1878, 285, 1509, 1087, 400, 2876, 1629, 1117, 2345, 761, 832, 1658, 1349, 1691, 957, 219, 1948, 554, 1254, 313, 1632, 1096, 895, 813, 1316, 413, 1040, 460, 465, 845, 1415, 1375, 1017, 699, 302, 789, 0, 627, 847, 612, 909, 1074, 164, 957 },
			{ 1251, 1385, 657, 893, 1677, 307, 2289, 1049, 1729, 2079, 1022, 1454, 1049, 727, 1104, 1294, 846, 1373, 1152, 948, 836, 1026, 901, 1522, 1415, 912, 996, 766, 1085, 925, 263, 891, 755, 1468, 1319, 923, 1387, 627, 0, 1071, 1116, 365, 454, 532, 433 },
			{ 1789, 1632, 1131, 1856, 1618, 1083, 2764, 1621, 1554, 3106, 1606, 1064, 1738, 1681, 1691, 1779, 862, 1876, 1185, 882, 1121, 1706, 655, 1205, 1357, 1062, 691, 741, 1007, 1279, 1091, 1328, 1719, 1770, 960, 952, 876, 847, 1071, 0, 1371, 1436, 1327, 979, 1053 },
			{ 488, 2464, 459, 1895, 604, 812, 3405, 2165, 715, 2221, 429, 754, 2161, 1761, 2221, 444, 510, 2489, 264, 1865, 302, 2140, 1708, 706, 414, 1918, 710, 1651, 419, 193, 1372, 1984, 1777, 408, 692, 419, 862, 612, 1116, 1371, 0, 1264, 1563, 606, 1517 },
			{ 1257, 1461, 832, 631, 1861, 513, 2204, 1031, 1942, 1750, 1042, 1737, 965, 500, 1068, 1320, 1121, 1342, 1366, 1198, 1032, 952, 1202, 1784, 1622, 1105, 1310, 1051, 1339, 1073, 448, 976, 513, 1550, 1607, 1179, 1696, 909, 365, 1436, 1264, 0, 429, 772, 618 },
			{ 1643, 1032, 1105, 529, 2131, 751, 1843, 621, 2183, 2093, 1418, 1891, 597, 355, 669, 1696, 1293, 943, 1606, 849, 1289, 576, 915, 1967, 1869, 716, 1418, 753, 1535, 1370, 251, 548, 394, 1897, 1755, 1374, 1807, 1074, 454, 1327, 1563, 429, 0, 986, 296 },
			{ 869, 1857, 177, 1388, 1145, 259, 2815, 1570, 1198, 2183, 657, 965, 1580, 1234, 1628, 885, 353, 1893, 620, 1281, 310, 1557, 1147, 1013, 883, 1317, 573, 1068, 568, 427, 776, 1379, 1257, 991, 837, 407, 941, 164, 532, 979, 606, 772, 986, 0, 912 },
			{ 1684, 955, 1063, 817, 2044, 730, 1920, 675, 2073, 2352, 1455, 1728, 732, 646, 740, 1725, 1164, 991, 1511, 582, 1222, 703, 622, 1821, 1771, 495, 1242, 461, 1411, 1331, 183, 467, 686, 1887, 1591, 1257, 1619, 957, 433, 1053, 1517, 618, 296, 912, 0 }
		},

		Santas = new[]
		{
			new Santa { Id = 0 },
			new Santa { Id = 1 },
			new Santa { Id = 2 },
			new Santa { Id = 3 },
			new Santa { Id = 4 }
		},

		Visits = new[]
		{
			new Visit{Duration = 3342, Id=0,WayCostFromHome=1293, WayCostToHome=1293,Unavailable =new [] {(24 * Hour + 7640, (24 * Hour + 7640) + 19861)},Desired = new [] {(0 * Hour + 11368, (0 * Hour + 11368) + 10317)}},
			new Visit{Duration = 2650, Id=1,WayCostFromHome=1753, WayCostToHome=1753,Unavailable =new [] {(24 * Hour + 8620, (24 * Hour + 8620) + 3208)},Desired = new [] {(0 * Hour + 7017, (0 * Hour + 7017) + 13809)}},
			new Visit{Duration = 3406, Id=2,WayCostFromHome=635, WayCostToHome=635,Unavailable =new [] {(24 * Hour + 89, (24 * Hour + 89) + 19371)},Desired = new [] {(0 * Hour + 22678, (0 * Hour + 22678) + 8237)}},
			new Visit{Duration = 2006, Id=3,WayCostFromHome=1630, WayCostToHome=1630,Unavailable =new [] {(24 * Hour + 14127, (24 * Hour + 14127) + 2600)},Desired = new [] {(0 * Hour + 17160, (0 * Hour + 17160) + 11650)}},
			new Visit{Duration = 1514, Id=4,WayCostFromHome=1246, WayCostToHome=1246,Unavailable =new [] {(24 * Hour + 6335, (24 * Hour + 6335) + 9953)},Desired = new [] {(0 * Hour + 8787, (0 * Hour + 8787) + 10227)}},
			new Visit{Duration = 2050, Id=5,WayCostFromHome=649, WayCostToHome=649,Unavailable =new [] {(24 * Hour + 1539, (24 * Hour + 1539) + 29323)},Desired = new [] {(0 * Hour + 634, (0 * Hour + 634) + 31719)}},
			new Visit{Duration = 2561, Id=6,WayCostFromHome=2823, WayCostToHome=2823,Unavailable =new [] {(24 * Hour + 10392, (24 * Hour + 10392) + 6077)},Desired = new [] {(0 * Hour + 3424, (0 * Hour + 3424) + 28108)}},
			new Visit{Duration = 2430, Id=7,WayCostFromHome=1595, WayCostToHome=1595,Unavailable =new [] {(24 * Hour + 3806, (24 * Hour + 3806) + 27186)},Desired = new [] {(0 * Hour + 833, (0 * Hour + 833) + 30798)}},
			new Visit{Duration = 2302, Id=8,WayCostFromHome=1227, WayCostToHome=1227,Unavailable =new [] {(24 * Hour + 4061, (24 * Hour + 4061) + 20271)},Desired = new [] {(0 * Hour + 15342, (0 * Hour + 15342) + 13609)}},
			new Visit{Duration = 1863, Id=9,WayCostFromHome=2663, WayCostToHome=2663,Unavailable =new [] {(24 * Hour + 7720, (24 * Hour + 7720) + 23728)},Desired = new [] {(0 * Hour + 6558, (0 * Hour + 6558) + 20282)}},
			new Visit{Duration = 1864, Id=10,WayCostFromHome=1107, WayCostToHome=1107,Unavailable =new [] {(24 * Hour + 9931, (24 * Hour + 9931) + 8137)},Desired = new [] {(0 * Hour + 7941, (0 * Hour + 7941) + 14764)}},
			new Visit{Duration = 2873, Id=11,WayCostFromHome=814, WayCostToHome=814,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 21737, (0 * Hour + 21737) + 7991)}},
			new Visit{Duration = 3008, Id=12,WayCostFromHome=1663, WayCostToHome=1663,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 10863, (0 * Hour + 10863) + 14589)}},
			new Visit{Duration = 3062, Id=13,WayCostFromHome=1457, WayCostToHome=1457,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 2706, (0 * Hour + 2706) + 28311)}},
			new Visit{Duration = 1791, Id=14,WayCostFromHome=1662, WayCostToHome=1662,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 2109, (0 * Hour + 2109) + 25503)}},
			new Visit{Duration = 2378, Id=15,WayCostFromHome=1286, WayCostToHome=1286,Unavailable =new [] {(0 * Hour + 284, (0 * Hour + 284) + 31485)},Desired = new [] {(24 * Hour + 9796, (24 * Hour + 9796) + 18996)}},
			new Visit{Duration = 2268, Id=16,WayCostFromHome=389, WayCostToHome=389,Unavailable =new [] {(0 * Hour + 4295, (0 * Hour + 4295) + 24963)},Desired = new [] {(24 * Hour + 793, (24 * Hour + 793) + 20835)}},
			new Visit{Duration = 2940, Id=17,WayCostFromHome=1896, WayCostToHome=1896,Unavailable =new [] {(0 * Hour + 12415, (0 * Hour + 12415) + 13215)},Desired = new [] {(24 * Hour + 13610, (24 * Hour + 13610) + 10589)}},
			new Visit{Duration = 3402, Id=18,WayCostFromHome=750, WayCostToHome=750,Unavailable =new [] {(0 * Hour + 5358, (0 * Hour + 5358) + 21704)},Desired = new [] {(24 * Hour + 21123, (24 * Hour + 21123) + 6665)}},
			new Visit{Duration = 2216, Id=19,WayCostFromHome=1055, WayCostToHome=1055,Unavailable =new [] {(0 * Hour + 2887, (0 * Hour + 2887) + 28504)},Desired = new [] {(24 * Hour + 15916, (24 * Hour + 15916) + 9158)}},
			new Visit{Duration = 2332, Id=20,WayCostFromHome=628, WayCostToHome=628,Unavailable =new [] {(0 * Hour + 2224, (0 * Hour + 2224) + 28184)},Desired = new [] {(24 * Hour + 3683, (24 * Hour + 3683) + 22786)}},
			new Visit{Duration = 2264, Id=21,WayCostFromHome=1633, WayCostToHome=1633,Unavailable =new [] {(0 * Hour + 19594, (0 * Hour + 19594) + 12109)},Desired = new [] {(24 * Hour + 4054, (24 * Hour + 4054) + 24115)}},
			new Visit{Duration = 2667, Id=22,WayCostFromHome=861, WayCostToHome=861,Unavailable =new [] {(0 * Hour + 3945, (0 * Hour + 3945) + 18550)},Desired = new [] {(24 * Hour + 9007, (24 * Hour + 9007) + 14670)}},
			new Visit{Duration = 1767, Id=23,WayCostFromHome=925, WayCostToHome=925,Unavailable =new [] {(0 * Hour + 16271, (0 * Hour + 16271) + 7169)},Desired = new [] {(24 * Hour + 4067, (24 * Hour + 4067) + 24585)}},
			new Visit{Duration = 1591, Id=24,WayCostFromHome=969, WayCostToHome=969,Unavailable =new [] {(0 * Hour + 4635, (0 * Hour + 4635) + 23732)},Desired = new [] {(24 * Hour + 1356, (24 * Hour + 1356) + 27684)}},
			new Visit{Duration = 1561, Id=25,WayCostFromHome=1166, WayCostToHome=1166,Unavailable =new [] {(0 * Hour + 9097, (0 * Hour + 9097) + 21007)},Desired = new [] {(24 * Hour + 907, (24 * Hour + 907) + 25863)}},
			new Visit{Duration = 3188, Id=26,WayCostFromHome=328, WayCostToHome=328,Unavailable =new (int from, int to)[0],Desired = new [] {(24 * Hour + 14655, (24 * Hour + 14655) + 6154)}},
			new Visit{Duration = 3238, Id=27,WayCostFromHome=850, WayCostToHome=850,Unavailable =new (int from, int to)[0],Desired = new [] {(24 * Hour + 7230, (24 * Hour + 7230) + 11893)}},
			new Visit{Duration = 3381, Id=28,WayCostFromHome=590, WayCostToHome=590,Unavailable =new (int from, int to)[0],Desired = new [] {(24 * Hour + 19195, (24 * Hour + 19195) + 10909)}},
			new Visit{Duration = 2957, Id=29,WayCostFromHome=786, WayCostToHome=786,Unavailable =new (int from, int to)[0],Desired = new [] {(24 * Hour + 3211, (24 * Hour + 3211) + 14143)}},
			new Visit{Duration = 2541, Id=30,WayCostFromHome=881, WayCostToHome=881,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 1810, Id=31,WayCostFromHome=1339, WayCostToHome=1339,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 2707, Id=32,WayCostFromHome=1490, WayCostToHome=1490,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 2765, Id=33,WayCostFromHome=1303, WayCostToHome=1303,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 1862, Id=34,WayCostFromHome=680, WayCostToHome=680,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 1446, Id=35,WayCostFromHome=490, WayCostToHome=490,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 1892, Id=36,WayCostFromHome=690, WayCostToHome=690,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 2551, Id=37,WayCostFromHome=350, WayCostToHome=350,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 1487, Id=38,WayCostFromHome=748, WayCostToHome=748,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]},
			new Visit{Duration = 3274, Id=39,WayCostFromHome=498, WayCostToHome=498,Unavailable =new (int from, int to)[0],Desired = new (int from, int to)[0]}
,			new Visit{Duration = 1800, Id=40,WayCostFromHome=896, WayCostToHome=896,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 205, (0 * Hour + 205) + 26348),(24 * Hour + 205, (24 * Hour + 205) + 26348)},SantaId=0,IsBreak = true},
			new Visit{Duration = 1800, Id=41,WayCostFromHome=1096, WayCostToHome=1096,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 1947, (0 * Hour + 1947) + 20982),(24 * Hour + 1947, (24 * Hour + 1947) + 20982)},SantaId=1,IsBreak = true},
			new Visit{Duration = 1800, Id=42,WayCostFromHome=1132, WayCostToHome=1132,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 1756, (0 * Hour + 1756) + 28430),(24 * Hour + 1756, (24 * Hour + 1756) + 28430)},SantaId=2,IsBreak = true},
			new Visit{Duration = 1800, Id=43,WayCostFromHome=493, WayCostToHome=493,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 1521, (0 * Hour + 1521) + 20419),(24 * Hour + 1521, (24 * Hour + 1521) + 20419)},SantaId=3,IsBreak = true},
			new Visit{Duration = 1800, Id=44,WayCostFromHome=930, WayCostToHome=930,Unavailable =new (int from, int to)[0],Desired = new [] {(0 * Hour + 6317, (0 * Hour + 6317) + 24379),(24 * Hour + 6317, (24 * Hour + 6317) + 24379)},SantaId=4,IsBreak = true}
		}
	};
	return (input, coordinates);
}
}
}
