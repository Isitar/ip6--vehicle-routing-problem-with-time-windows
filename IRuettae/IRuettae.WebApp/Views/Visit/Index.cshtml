@model IRuettae.WebApp.Models.VisitVM

@{
    ViewBag.Title = "Index";
}

@section styles
{
    @Styles.Render("~/Content/themes/base")
}

<h1>Besuch</h1>

@using (Html.BeginForm("AddVisit", "Visit", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <div class="form-group row">
        @Html.LabelFor(m => m.Year, new { @class = "col-md-2 col-form-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control year-input" } })
            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
        </div>
    </div>

    if (Model != null && Model.AlternativeAddressNeeded)
    {
        <div class="form-group row">
            @Html.LabelFor(m => m.OriginalStreet, new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OriginalStreet, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OriginalStreet, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    <div class="form-group row">
        @Html.LabelFor(m => m.Street, new { @class = "col-md-2 col-form-label" })
        <div class="col-md-7">
            @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
        </div>
    </div>

    if (Model != null && Model.AlternativeAddressNeeded)
    {


        <div class="form-group row small">
            @Html.LabelFor(m => m.DeltaWayDuration, new { @class = "col-md-2 col-form-label" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.DeltaWayDuration, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                @Html.ValidationMessageFor(model => model.DeltaWayDuration, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(m => m.DeltaWayDistance, new { @class = "col-md-2 col-form-label" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.DeltaWayDistance, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                @Html.ValidationMessageFor(model => model.DeltaWayDistance, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    <div class="form-group row">
        @Html.LabelFor(m => m.Zip, new { @class = "col-md-1 col-form-label" })
        @Html.LabelFor(m => m.City, new { @class = "col-md-1 col-form-label" })

        <div class="col-md-3">
            @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control", @id = "Zip-Input" } })
            @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control autocomplete", @id = "City-Input" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">

        @Html.LabelFor(m => m.NumberOfChildren, new { @class = "col-md-2 col-form-label" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.NumberOfChildren, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NumberOfChildren, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Desired, new { @class = "col-form-label" })


        <div class="desired pb-2">
            <div class="form-group row">
                <div class="col-md-1 col-form-label"><button class="btn btn-default btn-sm" id="btn[0]remove_desired" type="button" onclick="{ console.log($(this).parent());$(this).parent().parent().remove(); }"><i class="fa fa-minus"></i></button></div>
                <label class="col-md-1 col-form-label">Von</label>
                <div class="col-md-3 input-group">
                    <input type="datetime" name="Desired[0].Start" id="Desired_0__Start" class="form-control" placeholder="TT.MM.JJJJ HH:mm" />
                </div>

                <label class="col-md-1 col-form-label">Bis</label>
                <div class="col-md-3">
                    <input type="datetime" name="Desired[0].End" id="Desired_0__End form-control" class="form-control" placeholder="TT.MM.JJJJ HH:mm" />
                </div>

            </div>
        </div>
        <button type="button" id="AddDesired" class="btn btn-sm btn-accent"><i class="fa fa-plus"></i> <span style="line-height: 1">@Html.LabelFor(m => m.Desired) hinzufügen</span></button>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Unavailable, new { @class = "col-form-label" })

        <div class="unavailable pb-2">
            <div class="form-group row">
                <div class="col-md-1 col-form-label"><button class="btn btn-default btn-sm" id="btn[0]remove_unavailable" type="button" onclick="{console.log($(this).parent()); $(this).parent().parent().remove(); }"><i class="fa fa-minus"></i></button></div>
                <label class="col-md-1 col-form-label">Am</label>
                <div class="col-md-3">
                    <div class="input-group date">
                        <input type="date" name="Unavailable[0].Start" id="Unavailable_0__Start" class="form-control" placeholder="DD.MM.YYYY" />
                    </div>
                </div>
            </div>
        </div>
        <button type="button" id="AddUnavailable" class="btn btn-sm btn-default"><i class="fa fa-plus"></i> <span style="line-height: 1">@Html.LabelFor(m => m.Unavailable) hinzufügen</span></button>
    </div>
    <div class="form-group row">
        <div class="col-md-12">
            <button type="submit" class="btn btn-lg btn-dark pl-4 pr-4">Anmelden</button>
        </div>
    </div>
}




@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script type="text/javascript">
        $(document).ready(function() {

            $('.year-input').each(function () {
                if ($(this).val() === '') {
                    $(this).val(@DateTime.Today.Year);
                }


            });


        $('#AddDesired').click(function() {
            var desired = $('.desired');
            var count = desired.length;
            var clone = desired.first().clone();
            clone.html($(clone).html().replace(/\[0\]/g, '[' + count + ']'));
            clone.html($(clone).html().replace(/"_0__"/g, '_' + count + '__'));
            desired.last().after(clone);
        });

        $('#AddUnavailable').click(function() {
            var unavailable = $('.unavailable');
            var count = unavailable.length;
            var clone = unavailable.first().clone();
            clone.html($(clone).html().replace(/\[0\]/g, '[' + count + ']'));
            clone.html($(clone).html().replace('_0__', '_' + count + '__'));
            unavailable.last().after(clone);
        });

        document.getElementById('Zip-Input').oninput = function() {
            if ($('#Zip-Input').val().length !== 4) return;
            var url = '@Url.Action("CityFromZip", "Visit")?zip=' + $('#Zip-Input').val();
            console.log('requesting ' + url);
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function(data) {
                    if (data.length === 1) {
                        $('#City-Input').val(data[0]);
                    } else {
                        $('#City-Input').autocomplete({
                                source: data
                            }
                        );
                    }
                }
            });
            };



    });
    </script>
}
